#include <FEHLCD.h>

#include <FEHUtility.h>

#include <FEHServo.h>

#include <FEHMotor.h>

#include <FEHIO.h>

#include <math.h>

#include <FEHRPS.h>




FEHMotor rightMotor(FEHMotor::Motor2,7.2);

FEHMotor leftMotor(FEHMotor::Motor0,7.2);

DigitalEncoder rightEncoder(FEHIO::P2_3);

DigitalEncoder leftEncoder(FEHIO::P2_7);

//AnalogInputPin leftOpt(FEHIO::P0_2);

AnalogInputPin midOpt(FEHIO::P3_7);

//AnalogInputPin rightOpt(FEHIO::P0_0);

AnalogInputPin cdsCell(FEHIO::P1_7);

FEHServo arm(FEHServo::Servo0); //brown wire outside




#define LowThreshold 2.0

#define HighThreshold 2.3




// Thresholds for line following using optosensors




void drive(int left, int right){

    rightMotor.SetPercent(right);

    leftMotor.SetPercent(left);

}




void driveDistance(int lPower, int rPower, double lDistance, double rDistance){

    //Convert distance to count of rotations

    double rCounts = (180*lDistance)/(2*M_PI*1.625);

    double lCounts = (180*rDistance)/(2*M_PI*1.625);

    rightEncoder.ResetCounts();

    leftEncoder.ResetCounts();

    rightMotor.SetPercent(rPower);

    leftMotor.SetPercent(lPower);

    //While rotations are less than set counts, wait

    double time = TimeNow();

    while(leftEncoder.Counts() < lCounts && rightEncoder.Counts() < rCounts && TimeNow() - time < 7.0){

        LCD.WriteLine(leftEncoder.Counts());

        LCD.WriteLine(rightEncoder.Counts());

        Sleep(0.1);

        LCD.Clear();

    }

    rightMotor.Stop();

    leftMotor.Stop();

}




// Returns true if CdS cell detects color with tolerance, false if not

bool cellColor(int low, int high){

    if(cdsCell.Value() < high && cdsCell.Value() > low){

        return true;

    }

    else{

        return false;

    }

}




// Line following function using optosensors

// void lineFollow(){

//     if(leftOpt.Value() < LowThreshold && rightOpt.Value() < LowThreshold){

//         drive(15,15));

//     }

//     if(leftOpt.Value() > HighThreshold){

//         drive(5,15);

//     }

//     if(rightOpt.Value() > HighThreshold){

//         drive(15,5);

//     }

// }




// Temporary line following with 1 optosensor

void lineFollow2(){

    if(midOpt.Value() < LowThreshold){

        drive(25,50);

    }

    if(midOpt.Value() > HighThreshold){

        drive(50,25);

    }

}




void pulseLeft(int angle, int threshold){

    double time = TimeNow();

    while(RPS.Heading() == -1 || RPS.Heading() == -2 || RPS.Heading() < angle-threshold){

        if(TimeNow() - time < 7.0){

            drive(-42,42);

            Sleep(0.08);

            leftMotor.Stop();

            rightMotor.Stop();

            Sleep(0.4);

        }

        else{

            break;

        }

    }

}

void pulseRight(int angle, int threshold){

    double time = TimeNow();

    while(RPS.Heading() > angle+threshold || RPS.Heading() == -1 || RPS.Heading() == -2){

        if(TimeNow() - time < 7.0){

            drive(42,-42);

            Sleep(0.08);

            leftMotor.Stop();

            rightMotor.Stop();

            Sleep(0.4);

        }

        else{

            break;

        }

    }

}

void pulseForward(int x, int threshold){

    while(RPS.X() == -1 || RPS.X() < x-threshold){

        drive(42,42);

        Sleep(0.08);

        leftMotor.Stop();

        rightMotor.Stop();

        Sleep(0.4);

    }

}

void pulseBackward(int x, int threshold){

    while(RPS.X() > x+threshold || RPS.X() == -1){

        drive(-42,-42);

        Sleep(0.08);

        leftMotor.Stop();

        rightMotor.Stop();

        Sleep(0.4);

    }

}




void upAndSink(){

    // while(true){

    //     LCD.WriteRC(RPS.X(),2,12); //update the x coordinate

    //     LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate

    //     LCD.WriteRC(RPS.Heading(),4,12); //update the heading

    // }

    driveDistance(55,55,15,15); //forward

    Sleep(0.2);

    driveDistance(35,-35,3.1,3.1); //turn to ramp

    Sleep(0.2);

    driveDistance(80,80,24,24); //forward up ramp

    Sleep(0.2);




    pulseLeft(90, 2);

    pulseRight(90, 2);





    driveDistance(65,65,11,11); //adjust forward




    driveDistance(-40,40,8.55,8.55); //turn to sink

    Sleep(0.2);

    driveDistance(35,35,3.0,3.0); //adjust to sink




    for(double i=180; i>=40; i-=4){ //loop that lowers arm slowly

        arm.SetDegree(i);

        Sleep(0.008);

    }

    Sleep(0.2);

    arm.SetDegree(180);

    driveDistance(-50,-50,.5,.5);

}




void iceCream(){

    int CREAM = RPS.GetIceCream();

    if(CREAM == 0){ //move backwards based on which lever we need

        driveDistance(60,-60, 7.0, 7.0); //was 6

        Sleep(0.2);

        driveDistance(-60,-60,0.7,0.7);

    }

    else if(CREAM == 1){

        driveDistance(60,-60, 3, 3);

        Sleep(0.2);

        driveDistance(-60,-60,4.2,4.2);

    }

    else if(CREAM == 2){

        driveDistance(60,-60, 2, 2);

        Sleep(0.2);

        driveDistance(-60,-60,7.1,7.1);

    }

    Sleep(0.2);




    driveDistance(60,-60,3,3); //overshoot turn, since we're using pulse left first

    Sleep(0.2);

    pulseLeft(134,1); //set heading to ice cream levers

    pulseRight(134,1);




    drive(65,65);

    while(RPS.X() != -2); //drive until in FEHrozone (trademark pending)

    leftMotor.Stop();

    rightMotor.Stop();

    Sleep(0.2);




    if(CREAM == 0){ //drive forward over lever, depending on lever

        driveDistance(65,65, 4.0, 4.0);

    }

    else if(CREAM == 1){

        driveDistance(65,65, 5.1, 5.1);

    }

    else if(CREAM == 2){

        driveDistance(65,65, 3.9, 3.9);

    }




    arm.SetDegree(100);

    Sleep(0.5);

    arm.SetDegree(180);

    Sleep(0.2); //Move arm down then back up to tap lever down




    driveDistance(-70,-70,5.5,5.5);

    Sleep(6.5);




    arm.SetDegree(70);

    Sleep(0.2);

    driveDistance(70,70,4.5,4.5);

    Sleep(0.2);

    arm.SetDegree(150);

    Sleep(0.2);

    driveDistance(-45,-75,7,7);

    Sleep(0.25);

    arm.SetDegree(180);

}




void burgerFlip(){

    //driveDistance(60,-60,10,10);

    driveDistance(60,-60,2.8,2.8);

    Sleep(0.2);

    pulseRight(5, 1);

    Sleep(0.2);

    //driveDistance(50,50,2,2);

    if(RPS.X() < 23){

        pulseForward(23,0);

    }

    else if(RPS.X() > 23){

        pulseBackward(23,0);

    }

    leftMotor.Stop();

    rightMotor.Stop();

    Sleep(0.2);

    driveDistance(-60,60,5,5);

    Sleep(0.2);




    while(RPS.Heading() != -1 && RPS.Heading() < 93){ //check directional heading

        pulseLeft(95, 0);

    }

    arm.SetDegree(10);

    Sleep(0.2);

    while(RPS.Heading() != -1 && RPS.Heading() > 97){ //check directional heading

        pulseRight(95, 0);

    }




    //driveDistance(50,50,8,8);

    if(RPS.GetIceCream() == 0){ //Vanilla

        driveDistance(50,50,10.5,10.5);

    }

    if(RPS.GetIceCream() == 1){ //Twist

        driveDistance(50,50,7.7,7.7);

    }

    if(RPS.GetIceCream() == 2){ //Chocolate

        driveDistance(50,50,5.5,5.5);

    }

    //insert RPS Y code

    Sleep(0.2);

    driveDistance(-50,-50,.5,.5);

    Sleep(0.2);




    for(double i=10; i<=90; i+=0.4){ //loop that raises arm slowly and turns robot

        arm.SetDegree(i);

        drive(30,-30);

        Sleep(0.008);

    }

    driveDistance(50,-50,5,5);

    leftMotor.Stop();

    rightMotor.Stop();




    pulseLeft(40,3);

    driveDistance(30,30,.5,.5);




    Sleep(0.5);

    arm.SetDegree(80);

    driveDistance(-70,70,5,5);




    driveDistance(-40,-40,4,4);

}




void orderCard(){

    arm.SetDegree(180);

    driveDistance(60,-60,1.0,1.0);

    //optional; make robot face 90, and pulse back and forth using RPS Y

    while(RPS.Heading() != -1 && RPS.Heading() > 10){ //check directional heading

        pulseRight(5, 5);

    }

    driveDistance(80,80,10,10); //push to wall

    Sleep(0.2);

    driveDistance(-65,-65,8,8); //back up enough to put arm down

    arm.SetDegree(20);

    Sleep(0.2);

    driveDistance(60,-60,2,2);

    while(RPS.Heading() == -1 || RPS.Heading() > 315){ //face ticket

        pulseRight(310, 2);

    }

    Sleep(0.2);

    driveDistance(60,60,10.75,10.75);

    Sleep(0.2);

    driveDistance(50,-50,5,5);

    Sleep(0.2);

    driveDistance(-60,60,2,2);

    driveDistance(-60,-60,9,9);

    driveDistance(60,-60,3,3);

    arm.SetDegree(180);

}




void downRampJuke(){

    driveDistance(60,-60,3,3); //After pulling back from ticket

    pulseRight(180,1); //Align horizontal

    drive(40,40); //Square up w ramp until x val

    while(RPS.X() > 15);

    leftMotor.Stop();

    rightMotor.Stop();

    driveDistance(-50,50,3,3); //Turn towards ramp

    pulseLeft(270,1); //Align vertical

    driveDistance(60,60,28.5, 28.5); //Drive down ramp

    //driveDistance(-60,60,1.5,1.5); //Turn towards the button

    /*pulseLeft(305,1); //Align towards button

    driveDistance(75,75,30,30); //Zoomies towards button

    Sleep(0.2);

    driveDistance(60,-60,5,5);

    Sleep(0.2);

    driveDistance(75,75,11,11);

    Sleep(0.2);

    driveDistance(-60,-60,2,2);

    driveDistance(-60,60,3.5,3.5);

    pulseLeft(270,1);*/

    driveDistance(60, -60, 3, 3);

    pulseRight(180,1); //Align horizontal

    driveDistance(60, 60, 13, 13);

    Sleep(0.2);

    driveDistance(-60,-60,1.4,1.4);

    Sleep(0.2);

    driveDistance(-60, 60, 3, 3);

    pulseLeft(270,1); //Align vertical

    drive(30,30);

    while(cdsCell.Value() > 1){

        LCD.WriteLine(cdsCell.Value());

    }

    leftMotor.Stop();

    rightMotor.Stop();

    double time = TimeNow();

    int countRed = 0;

    int countBlue = 0;

    while(countRed < 10 || countBlue < 10){

        if((cdsCell.Value() < .4)){

            countRed += 1;

        }

        else{

            countBlue += 1;

        }

        LCD.WriteLine(cdsCell.Value());

    }

    if(countRed > countBlue){

        driveDistance(-20, 30, 2, 2);

        pulseRight(180,1);

        driveDistance(20, 20, 2, 2);

    }

    else{

        driveDistance(30, -20, 2, 2);

        pulseRight(180,1);

        driveDistance(20, 20, 2, 2);

    }




}




void finalButtonPlanB(){

    driveDistance(60,-60,3,3); //After pulling back from ticket

    pulseRight(180,1); //Align horizontal

    drive(40,40); //Square up w ramp until x val

    while(RPS.X() > 15);

    leftMotor.Stop();

    rightMotor.Stop();

    driveDistance(-50,50,3,3); //Turn towards ramp

    pulseLeft(270,1); //Align vertical

    driveDistance(60,60,34, 34); //Drive down ramp

    driveDistance(-60,60,1,1);

    pulseRight(310,1);

    pulseLeft(310,1);

    driveDistance(60,60,20,20);




}




int main()

{

    RPS.InitializeTouchMenu();

    arm.SetMin(1290);

    arm.SetMax(2230);

    arm.SetDegree(180);

    // while(true){

    //     LCD.WriteRC(RPS.X(),2,12); //update the x coordinate

    //     LCD.WriteRC(RPS.Y(),3,12); //update the y coordinate

    //     LCD.WriteRC(RPS.Heading(),4,12); //update the heading

    // }




    int count = 0;

    double time = TimeNow();

    while(count < 10 && TimeNow() - time < 30.0){

        if((cdsCell.Value() < .35)){

           count +=1;

         }

        LCD.WriteLine(cdsCell.Value());

    }

    upAndSink();

    iceCream();

    burgerFlip();

    orderCard();

    finalButtonPlanB();

}
